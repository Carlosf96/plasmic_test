// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qZkA3qWw23164No1KhMX9w
// Component: lnfqzxhRwLLLF
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: ESgvEF7MpeQOE/component
import Task from "../../Task"; // plasmic-import: PVH9uPZpgA1_E/component
import Footer from "../../Footer"; // plasmic-import: 4XA1wLh_f3yJY/component

import { ThemeContext, ThemeValue } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: PvMXhxpNYVIa7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_todo_mvc.module.css"; // plasmic-import: qZkA3qWw23164No1KhMX9w/projectcss
import * as sty from "./PlasmicTodoApp.module.css"; // plasmic-import: lnfqzxhRwLLLF/css

export type PlasmicTodoApp__VariantMembers = {
  state: "empty";
};

export type PlasmicTodoApp__VariantsArgs = {
  state?: SingleChoiceArg<"empty">;
};

type VariantPropType = keyof PlasmicTodoApp__VariantsArgs;
export const PlasmicTodoApp__VariantProps = new Array<VariantPropType>("state");

export type PlasmicTodoApp__ArgsType = {};
type ArgPropType = keyof PlasmicTodoApp__ArgsType;
export const PlasmicTodoApp__ArgProps = new Array<ArgPropType>();

export type PlasmicTodoApp__OverridesType = {
  root?: p.Flex<"div">;
  appTitle?: p.Flex<"div">;
  appBody?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  tasksContainer?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
  fakeStack?: p.Flex<"div">;
};

export interface DefaultTodoAppProps {
  state?: SingleChoiceArg<"empty">;
  className?: string;
}

function PlasmicTodoApp__RenderFunc(props: {
  variants: PlasmicTodoApp__VariantsArgs;
  args: PlasmicTodoApp__ArgsType;
  overrides: PlasmicTodoApp__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    theme: React.useContext(ThemeContext)
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
      </Head>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root,
            {
              [sty.root__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              ),
              [sty.root__state_empty]: hasVariant(variants, "state", "empty")
            }
          )}
        >
          <div
            data-plasmic-name={"appTitle"}
            data-plasmic-override={overrides.appTitle}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.appTitle,
              {
                [sty.appTitle__global_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              }
            )}
          >
            {"Todos"}
          </div>

          <div
            className={classNames(defaultcss.all, sty.box__dmh5M, {
              [sty.box__global_theme_dark__dmh5ME1OtI]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          >
            <div
              data-plasmic-name={"appBody"}
              data-plasmic-override={overrides.appBody}
              className={classNames(defaultcss.all, sty.appBody, {
                [sty.appBody__global_theme_dark]: hasVariant(
                  globalVariants,
                  "theme",
                  "dark"
                )
              })}
            >
              <Header
                data-plasmic-name={"header"}
                data-plasmic-override={overrides.header}
                className={classNames("__wab_instance", sty.header, {
                  [sty.header__global_theme_dark]: hasVariant(
                    globalVariants,
                    "theme",
                    "dark"
                  ),
                  [sty.header__state_empty]: hasVariant(
                    variants,
                    "state",
                    "empty"
                  )
                })}
                state={
                  hasVariant(variants, "state", "empty")
                    ? ("empty" as const)
                    : undefined
                }
              />

              {(hasVariant(variants, "state", "empty") ? false : true) ? (
                <div
                  data-plasmic-name={"tasksContainer"}
                  data-plasmic-override={overrides.tasksContainer}
                  className={classNames(defaultcss.all, sty.tasksContainer, {
                    [sty.tasksContainer__state_empty]: hasVariant(
                      variants,
                      "state",
                      "empty"
                    )
                  })}
                >
                  <Task
                    className={classNames("__wab_instance", sty.task__kX9M0, {
                      [sty.task__global_theme_dark__kX9M0E1OtI]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      )
                    })}
                    state={"editing" as const}
                  >
                    {"Some kind of text here"}
                  </Task>

                  <Task
                    className={classNames("__wab_instance", sty.task__hewN, {
                      [sty.task__global_theme_dark__hewNE1OtI]: hasVariant(
                        globalVariants,
                        "theme",
                        "dark"
                      ),
                      [sty.task__state_empty__hewNTI7Ef]: hasVariant(
                        variants,
                        "state",
                        "empty"
                      )
                    })}
                  >
                    {"Some kind of text here"}
                  </Task>

                  <Task
                    className={classNames("__wab_instance", sty.task__ukWol)}
                    state={"checked" as const}
                  >
                    {"Some kind of text here"}
                  </Task>

                  <Task
                    className={classNames("__wab_instance", sty.task___4Si1L)}
                  >
                    {"I have a task to do something that takes a long time"}
                  </Task>
                </div>
              ) : null}
              {(hasVariant(variants, "state", "empty") ? false : true) ? (
                <Footer
                  data-plasmic-name={"footer"}
                  data-plasmic-override={overrides.footer}
                  className={classNames("__wab_instance", sty.footer, {
                    [sty.footer__state_empty]: hasVariant(
                      variants,
                      "state",
                      "empty"
                    )
                  })}
                  count={"2"}
                  state={["hasCompleted"]}
                />
              ) : null}
            </div>

            {(hasVariant(variants, "state", "empty") ? false : true) ? (
              <div
                data-plasmic-name={"fakeStack"}
                data-plasmic-override={overrides.fakeStack}
                className={classNames(defaultcss.all, sty.fakeStack, {
                  [sty.fakeStack__state_empty]: hasVariant(
                    variants,
                    "state",
                    "empty"
                  )
                })}
              >
                <div
                  className={classNames(defaultcss.all, sty.box__i1LCl, {
                    [sty.box__global_theme_dark__i1LCle1OtI]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  })}
                />

                <div
                  className={classNames(defaultcss.all, sty.box__f81Wn, {
                    [sty.box__global_theme_dark__f81WnE1OtI]: hasVariant(
                      globalVariants,
                      "theme",
                      "dark"
                    )
                  })}
                />
              </div>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "appTitle",
    "appBody",
    "header",
    "tasksContainer",
    "footer",
    "fakeStack"
  ],
  appTitle: ["appTitle"],
  appBody: ["appBody", "header", "tasksContainer", "footer"],
  header: ["header"],
  tasksContainer: ["tasksContainer"],
  footer: ["footer"],
  fakeStack: ["fakeStack"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  appTitle: "div";
  appBody: "div";
  header: typeof Header;
  tasksContainer: "div";
  footer: typeof Footer;
  fakeStack: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTodoApp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicTodoApp__VariantsArgs;
  args?: PlasmicTodoApp__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicTodoApp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicTodoApp__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTodoApp__ArgProps,
      internalVariantPropNames: PlasmicTodoApp__VariantProps
    });

    return PlasmicTodoApp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTodoApp";
  } else {
    func.displayName = `PlasmicTodoApp.${nodeName}`;
  }
  return func;
}

export const PlasmicTodoApp = Object.assign(
  // Top-level PlasmicTodoApp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    appTitle: makeNodeComponent("appTitle"),
    appBody: makeNodeComponent("appBody"),
    header: makeNodeComponent("header"),
    tasksContainer: makeNodeComponent("tasksContainer"),
    footer: makeNodeComponent("footer"),
    fakeStack: makeNodeComponent("fakeStack"),

    // Metadata about props expected for PlasmicTodoApp
    internalVariantProps: PlasmicTodoApp__VariantProps,
    internalArgProps: PlasmicTodoApp__ArgProps
  }
);

export default PlasmicTodoApp;
/* prettier-ignore-end */
